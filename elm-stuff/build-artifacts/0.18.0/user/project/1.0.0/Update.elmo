var _user$project$Update$updateLevels = function (model) {
	return A3(
		_user$project$Definitions$mapWhere,
		function (_p0) {
			return A2(
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					}),
				model.selected + 1,
				function (_) {
					return _.id;
				}(_p0));
		},
		function (lvl) {
			return _elm_lang$core$Native_Utils.update(
				lvl,
				{unlocked: true});
		},
		A3(
			_user$project$Definitions$mapWhere,
			function (_p1) {
				return A2(
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.eq(x, y);
						}),
					model.selected,
					function (_) {
						return _.id;
					}(_p1));
			},
			function (lvl) {
				return _elm_lang$core$Native_Utils.update(
					lvl,
					{
						bestStep: function () {
							var best_step = _elm_lang$core$Native_Utils.eq(lvl.bestStep, 0) ? 999999 : lvl.bestStep;
							return A2(_elm_lang$core$Basics$min, best_step, model.current.steps);
						}(),
						bestTime: function () {
							var best_time = _elm_lang$core$Native_Utils.eq(lvl.bestTime, 0.0) ? 999999.0 : lvl.bestTime;
							return A2(
								_elm_lang$core$Basics$min,
								best_time,
								A3(
									_elm_lang$core$Basics$flip,
									F2(
										function (x, y) {
											return x / y;
										}),
									10,
									_elm_lang$core$Basics$toFloat(
										_elm_lang$core$Basics$round(
											A3(
												_elm_lang$core$Basics$flip,
												F2(
													function (x, y) {
														return x / y;
													}),
												100,
												model.time - model.timeStart)))));
						}()
					});
			},
			model.levels));
};
var _user$project$Update$canMoveBoxes = F4(
	function (player_pos, _p2, boxes, tiles) {
		var _p3 = _p2;
		var boxes_ = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$List$map,
			boxes,
			function (_p4) {
				var _p5 = _p4;
				var _p7 = _p5._1;
				var _p6 = _p5._0;
				return _elm_lang$core$Native_Utils.eq(
					{ctor: '_Tuple2', _0: _p6, _1: _p7},
					player_pos) ? {ctor: '_Tuple2', _0: _p6 + _p3._0, _1: _p7 + _p3._1} : {ctor: '_Tuple2', _0: _p6, _1: _p7};
			});
		var zip_boxes_ = A2(
			_elm_lang$core$List$map,
			function (_p8) {
				var _p9 = _p8;
				return {ctor: '_Tuple2', _0: _p9._0 + 1, _1: _p9._1};
			},
			A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				boxes_));
		var colided_with_box = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$List$any,
			zip_boxes_,
			function (_p10) {
				var _p11 = _p10;
				return A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$List$any,
					zip_boxes_,
					function (_p12) {
						var _p13 = _p12;
						return (!_elm_lang$core$Native_Utils.eq(_p11._0, _p13._0)) && _elm_lang$core$Native_Utils.eq(_p11._1, _p13._1);
					});
			});
		var colided_with_wall = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$List$any,
			boxes_,
			function (bpos) {
				return A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$List$any,
					tiles,
					function (t) {
						return _elm_lang$core$Native_Utils.eq(t.pos, bpos) && _elm_lang$core$Native_Utils.eq(t.block, _user$project$Types$BWall);
					});
			});
		return (colided_with_box || colided_with_wall) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(boxes_);
	});
var _user$project$Update$isWalkable = F2(
	function (pos, level) {
		var tile = _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				function (_p14) {
					return A2(
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							}),
						pos,
						function (_) {
							return _.pos;
						}(_p14));
				},
				level.tiles));
		return A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				function (_p15) {
					return A2(
						F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							}),
						_user$project$Types$BFloor,
						function (_) {
							return _.block;
						}(_p15));
				},
				tile));
	});
var _user$project$Update$updateWalk = F2(
	function (_p16, model) {
		var _p17 = _p16;
		var _p19 = _p17._1;
		var _p18 = _p17._0;
		var current = function () {
			if (model.current.won) {
				return model.current;
			} else {
				var pos = A2(
					_elm_lang$core$Tuple$mapSecond,
					F2(
						function (x, y) {
							return x + y;
						})(_p19),
					A2(
						_elm_lang$core$Tuple$mapFirst,
						F2(
							function (x, y) {
								return x + y;
							})(_p18),
						model.current.player));
				var boxes_ = A4(
					_user$project$Update$canMoveBoxes,
					pos,
					{ctor: '_Tuple2', _0: _p18, _1: _p19},
					model.current.boxes,
					model.current.tiles);
				var success = _elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Basics$abs(_p18) + _elm_lang$core$Basics$abs(_p19),
					1) && (A2(_user$project$Update$isWalkable, pos, model.current) && (!_elm_lang$core$Native_Utils.eq(boxes_, _elm_lang$core$Maybe$Nothing)));
				var won = success && A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$List$all,
					A2(_elm_lang$core$Maybe$withDefault, model.current.boxes, boxes_),
					function (bpos) {
						return A2(
							_elm_lang$core$List$any,
							F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.eq(x, y);
								})(bpos),
							model.current.holes);
					});
				if (!success) {
					return model.current;
				} else {
					var current = model.current;
					return _elm_lang$core$Native_Utils.update(
						current,
						{
							player: pos,
							boxes: A2(_elm_lang$core$Maybe$withDefault, model.current.boxes, boxes_),
							won: won,
							steps: model.current.steps + 1
						});
				}
			}
		}();
		return (!current.won) ? _elm_lang$core$Native_Utils.update(
			model,
			{current: current}) : _elm_lang$core$Native_Utils.update(
			model,
			{
				levels: _user$project$Update$updateLevels(model),
				state: _user$project$Model$GSMenu
			});
	});
var _user$project$Update$update = F2(
	function (msg, model) {
		var _p20 = msg;
		switch (_p20.ctor) {
			case 'Nop':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'Menu':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{state: _user$project$Model$GSMenu}),
					{ctor: '[]'});
			case 'Tick':
				var levels = A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$List$map,
					model.levels,
					function (lvl) {
						return _elm_lang$core$Native_Utils.update(
							lvl,
							{
								failStep: _elm_lang$core$Native_Utils.eq(lvl.failStep, 0) ? lvl.failStep : ((lvl.failStep * -1) + ((_elm_lang$core$Native_Utils.cmp(lvl.failStep, 0) > 0) ? 1 : -1))
							});
					});
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{levels: levels, time: _p20._0}),
					{ctor: '[]'});
			case 'Enter':
				if (!_elm_lang$core$Native_Utils.eq(model.state, _user$project$Model$GSMenu)) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var m_levelInfo = _elm_lang$core$List$head(
						A2(_elm_lang$core$List$drop, model.selected - 1, model.levels));
					var _p21 = m_levelInfo;
					if (_p21.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					} else {
						var _p22 = _p21._0;
						return _p22.unlocked ? A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{state: _user$project$Model$GSPlaying, timeStart: model.time, current: _p22.level}),
							{ctor: '[]'}) : A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									levels: A3(
										_user$project$Definitions$mapWhere,
										function (lvl) {
											return _elm_lang$core$Native_Utils.eq(lvl.id, model.selected);
										},
										function (lvl) {
											return _elm_lang$core$Native_Utils.update(
												lvl,
												{failStep: 4});
										},
										model.levels)
								}),
							{ctor: '[]'});
					}
				}
			case 'Arrows':
				var _p24 = _p20._0._1;
				var _p23 = _p20._0._0;
				return _elm_lang$core$Native_Utils.eq(model.state, _user$project$Model$GSMenu) ? A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selected: A2(
								_user$project$Definitions$fixBetween,
								model.selected + _user$project$Definitions$arrowToIconId(
									{ctor: '_Tuple2', _0: _p23, _1: _p24}),
								{
									ctor: '_Tuple2',
									_0: _user$project$Definitions$iconMin,
									_1: _elm_lang$core$List$length(model.levels)
								})
						}),
					{ctor: '[]'}) : A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					A2(
						_user$project$Update$updateWalk,
						{ctor: '_Tuple2', _0: _p23, _1: _p24},
						model),
					{ctor: '[]'});
			default:
				var current = A2(
					_elm_lang$core$Maybe$withDefault,
					_user$project$Model$level_error,
					A2(
						_elm_lang$core$Maybe$map,
						function (_) {
							return _.level;
						},
						_elm_lang$core$List$head(
							A2(
								_elm_lang$core$List$filter,
								function (_p25) {
									return A2(
										F2(
											function (x, y) {
												return _elm_lang$core$Native_Utils.eq(x, y);
											}),
										model.selected,
										function (_) {
											return _.id;
										}(_p25));
								},
								model.levels))));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{time: model.time, timeStart: model.time}),
					{ctor: '[]'});
		}
	});
